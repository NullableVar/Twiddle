@page "/login"
@page "/"
@using Twiddle.Models
@inject NavigationManager Navigation
@inject Twiddle.Core.UserApiClient ApiClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@rendermode InteractiveServer

<div class="main-container">
    <div class="logo-card">
        <img src="Images/Twiddle_Logo.png" alt="App Logo"/>
    </div>

    <div class="login-container">
        <h2>Login</h2>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="LoginForm">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div>
                <label>Email</label>
                <InputText @bind-Value="loginModel.Email" type="email"/>
                <ValidationMessage For="@(() => loginModel.Email)"/>
            </div>

            <div>
                <label>Password</label>
                <InputText @bind-Value="loginModel.Password" type="password"/>
                <ValidationMessage For="@(() => loginModel.Password)"/>
            </div>

            <button type="submit">Login</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-danger">@errorMessage</p>
        }

        <div class="register-link">
            <p>No account? <a href="/register">Register here</a></p>
        </div>
    </div>
</div>

@code {
    private UserModel loginModel = new();
    private string? errorMessage;
    
    private async Task HandleLogin()
    {
        var (success, tokenOrMessage) = await ApiClient.LoginAsync(loginModel);

        if (success)
        {
            await LocalStorage.SetItemAsStringAsync("authToken", tokenOrMessage);

            if (!string.IsNullOrWhiteSpace(loginModel.Email))
            {
                await LocalStorage.SetItemAsStringAsync("userEmail", loginModel.Email);

                var (userSuccess, userResponse) = await ApiClient.GetUserByEmailAsync(loginModel.Email);
                if (userSuccess)
                {
                    var user = System.Text.Json.JsonSerializer.Deserialize<UserModel>(
                        userResponse,
                        new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                    );
                    if (user != null)
                    {
                        await LocalStorage.SetItemAsStringAsync("userId", user.Id.ToString());
                    }
                }
            }

            Navigation.NavigateTo("/home", forceLoad: true);
        }
        else
        {
            errorMessage = tokenOrMessage;
        }
    }
}
