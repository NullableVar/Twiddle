@page "/home"
@using Twiddle.Models
@using Twiddle.Components.ViewModels
@using System.Text.Json
@inject NavigationManager Navigation
@inject Twiddle.Core.TwidApiClient TwidApiClient
@inject Twiddle.Core.UserApiClient UserApiClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@rendermode InteractiveServer

<div class="home-container">
    <!-- Header Section -->
    <header class="home-header">
        <div class="header-left">
            <img src="Images/Twiddle_Logo.png" alt="Twiddle Logo" class="header-logo"/>
            <h1>Twiddle</h1>
        </div>
        <div class="header-right">
            <button class="profile-btn" @onclick="NavigateToProfile">
                <span class="profile-icon">👤</span>
                @currentUsername
            </button>
            <button class="logout-btn" @onclick="HandleLogout">
                Logout
            </button>
        </div>
    </header>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Sidebar -->
        <div class="sidebar">
            <!-- Create Twid Section -->
            <div class="create-twid-card">
                <h3>What's happening?</h3>
                <EditForm Model="@newTwid" OnValidSubmit="@HandleCreateTwid" FormName="CreateTwidForm">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <div class="twid-input-container">
                        <InputTextArea @bind-Value="newTwid.Text"
                                       placeholder="Share your thoughts..."
                                       class="twid-textarea"/>
                        <ValidationMessage For="@(() => newTwid.Text)"/>
                    </div>

                    <div class="twid-actions">
                        <span class="character-count">@(newTwid.Text?.Length ?? 0)/1024</span>
                        <button type="submit" class="twid-submit-btn" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span>Posting...</span>
                            }
                            else
                            {
                                <span>Post Twid</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>

        <!-- Feed Content -->
        <div class="feed-content">
            <!-- Error Message -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }

            <!-- Success Message -->
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="success-message">@successMessage</div>
            }

            <!-- Twids Feed -->
            <div class="twids-container">
                <h3>Latest Twids</h3>

                @if (isLoadingTwids)
                {
                    <div class="loading">Loading twids...</div>
                }
                else if (twids?.Any() == true)
                {
                    @foreach (var twid in twids.OrderByDescending(t => t.CreatedAt))
                    {
                        <div class="twid-card">
                            <div class="twid-header">
                                <span class="twid-user">
                                    @GetUsernameForTwid(twid.UserId)
                                </span>
                                <span class="twid-date">@twid.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                            </div>
                            <div class="twid-content">
                                @twid.Text
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="no-twids">
                        <p>No twids found. Be the first to post something!</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .home-container {
        min-height: 100vh;
        background: #fffbf0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .home-header {
        background: #ffffff;
        padding: 20px 40px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 8px 20px rgba(255, 179, 0, 0.15);
        border-bottom: 1px solid #eee;
        position: sticky;
        top: 0;
        z-index: 100;
    }

    .header-left {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .header-logo {
        height: 40px;
        width: auto;
    }

    .header-left h1 {
        color: #333;
        margin: 0;
        font-size: 1.6rem;
        font-weight: 600;
    }

    .header-right {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .profile-btn, .logout-btn {
        padding: 12px 15px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        font-size: 14px;
        transition: background 0.3s, transform 0.2s;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
    }

    .profile-btn {
        background: #FFB300;
        color: #fff;
    }

    .profile-btn:hover {
        background: #FF8F00;
        transform: translateY(-2px);
    }

    .logout-btn {
        background: transparent;
        color: #FFB300;
        border: 1px solid #FFB300;
    }

    .logout-btn:hover {
        background: #FFB300;
        color: #fff;
        transform: translateY(-2px);
    }

    .profile-icon {
        font-size: 16px;
    }

    .main-content {
        max-width: 1200px;
        margin: 0 auto;
        padding: 40px 20px;
        display: grid;
        grid-template-columns: 350px 1fr;
        gap: 30px;
        align-items: start;
    }

    .sidebar {
        position: sticky;
        top: 120px;
    }

    .create-twid-card {
        background: #fefdf8;
        border-radius: 12px;
        padding: 30px;
        box-shadow: 0 8px 20px rgba(255, 179, 0, 0.15);
        margin-bottom: 20px;
    }

    .create-twid-card h3 {
        color: #333;
        margin: 0 0 20px 0;
        font-size: 18px;
        font-weight: 600;
        text-align: center;
    }

    .twid-input-container {
        margin-bottom: 20px;
        display: flex;
        flex-direction: column;
    }

    .twid-textarea {
        width: 100%;
        min-height: 100px;
        padding: 12px 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 14px;
        font-family: inherit;
        resize: vertical;
        transition: border 0.3s, box-shadow 0.3s;
    }

    .twid-textarea:focus {
        outline: none;
        border-color: #FFB300;
        box-shadow: 0 0 5px rgba(255, 179, 0, 0.5);
    }

    .twid-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .character-count {
        font-size: 12px;
        color: #666;
    }

    .twid-submit-btn {
        background: #FFB300;
        color: #fff;
        border: none;
        padding: 12px 20px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.3s, transform 0.2s;
    }

    .twid-submit-btn:hover:not(:disabled) {
        background: #FF8F00;
        transform: translateY(-2px);
    }

    .twid-submit-btn:active {
        transform: translateY(0);
    }

    .twid-submit-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .feed-content {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .twids-container {
        background: #fefdf8;
        border-radius: 12px;
        padding: 30px;
        box-shadow: 0 8px 20px rgba(255, 179, 0, 0.15);
    }

    .twids-container h3 {
        color: #333;
        margin: 0 0 25px 0;
        font-size: 18px;
        font-weight: 600;
        text-align: center;
    }

    .twid-card {
        background: #ffffff;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 15px;
        box-shadow: 0 8px 20px rgba(255, 179, 0, 0.1);
        border: 1px solid #eee;
        transition: transform 0.2s, box-shadow 0.3s;
    }

    .twid-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 25px rgba(255, 179, 0, 0.2);
    }

    .twid-card:last-child {
        margin-bottom: 0;
    }

    .twid-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

    .twid-user {
        font-weight: 600;
        color: #555;
        font-size: 14px;
    }

    .twid-date {
        color: #666;
        font-size: 12px;
    }

    .twid-content {
        color: #333;
        line-height: 1.5;
        font-size: 14px;
    }

    .loading, .no-twids {
        text-align: center;
        padding: 40px 20px;
        color: #666;
        font-style: italic;
        font-size: 14px;
    }

    .error-message {
        background: #f8d7da;
        color: #e74c3c;
        padding: 12px 15px;
        border-radius: 8px;
        border: 1px solid #f5c6cb;
        margin-bottom: 20px;
        font-size: 14px;
    }

    .success-message {
        background: #fff3cd;
        color: #856404;
        padding: 12px 15px;
        border-radius: 8px;
        border: 1px solid #ffeaa7;
        margin-bottom: 20px;
        font-size: 14px;
    }

    @@media (max-width: 992px) {
        .main-content {
            grid-template-columns: 1fr;
            padding: 30px 20px;
        }

        .sidebar {
            position: static;
        }
    }

    @@media (max-width: 768px) {
        .home-header {
            padding: 20px;
            flex-direction: column;
            gap: 15px;
        }

        .header-left h1 {
            font-size: 1.4rem;
        }

        .main-content {
            padding: 20px;
            gap: 20px;
        }

        .create-twid-card, .twids-container {
            padding: 20px;
        }

        .twid-actions {
            flex-direction: column;
            gap: 15px;
            align-items: stretch;
        }

        .twid-submit-btn {
            width: 100%;
        }
    }

</style>

@code {
    private TwidViewModel newTwid = new();
    private List<TwidModel>? twids;
    private string? errorMessage;
    private string? successMessage;
    private bool isSubmitting;
    private bool isLoadingTwids = true;
    private string? currentUsername;
    private Dictionary<Guid, string> userCache = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            var email = await LocalStorage.GetItemAsStringAsync("userEmail");
            if (!string.IsNullOrWhiteSpace(email))
            {
                var (success, response) = await UserApiClient.GetUserByEmailAsync(email);
                if (success)
                {
                    var user = JsonSerializer.Deserialize<UserModel>(response, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                    if (user != null)
                    {
                        currentUsername = user.Name;
                        userCache[user.Id] = user.Name;
                        await LocalStorage.SetItemAsStringAsync("userId", user.Id.ToString());
                    }
                }
            }

            await LoadTwids();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load page: " + ex.Message;
        }
    }

    private async Task LoadTwids()
    {
        try
        {
            isLoadingTwids = true;
            var (success, response) = await TwidApiClient.GetAllAsync();

            if (success)
            {
                twids = JsonSerializer.Deserialize<List<TwidModel>>(response, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (twids != null)
                {
                    foreach (var t in twids)
                    {
                        if (!userCache.ContainsKey(t.UserId))
                        {
                            var (ok, resp) = await UserApiClient.GetUserByIdAsync(t.UserId);
                            if (ok)
                            {
                                var u = JsonSerializer.Deserialize<UserModel>(resp, new JsonSerializerOptions
                                {
                                    PropertyNameCaseInsensitive = true
                                });
                                if (u != null)
                                {
                                    userCache[u.Id] = u.Name;
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                errorMessage = "Failed to load twids: " + response;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading twids: " + ex.Message;
        }
        finally
        {
            isLoadingTwids = false;
        }
    }

    private string GetUsernameForTwid(Guid userId)
    {
        if (userCache.TryGetValue(userId, out var username))
            return username;

        return "Unknown User";
    }

    private async Task HandleCreateTwid()
    {
        try
        {
            isSubmitting = true;
            errorMessage = null;
            successMessage = null;

            var userIdStr = await LocalStorage.GetItemAsStringAsync("userId");
            if (!Guid.TryParse(userIdStr, out var userId))
            {
                errorMessage = "Could not find user information. Please login again.";
                return;
            }

            if (!string.IsNullOrEmpty(currentUsername))
                userCache[userId] = currentUsername;

            var twidModel = new TwidModel
            {
                Id = Guid.NewGuid(),
                UserId = userId,
                Text = newTwid.Text,
                CreatedAt = DateTime.UtcNow
            };

            var (success, response) = await TwidApiClient.CreateAsync(twidModel);

            if (success)
            {
                successMessage = "Twid posted successfully!";
                newTwid = new TwidViewModel();
                await LoadTwids();

                _ = Task.Delay(3000).ContinueWith(_ =>
                {
                    successMessage = null;
                    InvokeAsync(StateHasChanged);
                });
            }
            else
            {
                errorMessage = "Failed to post twid: " + response;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error posting twid: " + ex.Message;
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void NavigateToProfile()
    {
        Navigation.NavigateTo("/profile");
    }

    private async Task HandleLogout()
    {
        try
        {
            await LocalStorage.RemoveItemAsync("authToken");
            await LocalStorage.RemoveItemAsync("userEmail");
            await LocalStorage.RemoveItemAsync("userId");
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = "Error during logout: " + ex.Message;
        }
    }

}