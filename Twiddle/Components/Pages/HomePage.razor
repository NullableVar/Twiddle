@page "/home"
@using Twiddle.Models
@using Twiddle.Components.ViewModels
@using System.Text.Json
@inject NavigationManager Navigation
@inject Twiddle.Core.TwidApiClient TwidApiClient
@inject Twiddle.Core.UserApiClient UserApiClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@rendermode InteractiveServer

<div class="home-container">
    <!-- Header Section -->
    <header class="home-header">
        <div class="header-left">
            <img src="Images/Twiddle_Logo.png" alt="Twiddle Logo" class="header-logo"/>
            <h1>Twiddle</h1>
        </div>
        <div class="header-right">
            <button class="profile-btn" @onclick="NavigateToProfile">
                <span class="profile-icon">👤</span>
                My Profile
            </button>
            <button class="logout-btn" @onclick="HandleLogout">
                Logout
            </button>
        </div>
    </header>

    <div class="main-content">
        <div class="sidebar">
            <div class="create-twid-card">
                <h3>What's happening?</h3>
                <EditForm Model="@newTwid" OnValidSubmit="@HandleCreateTwid" FormName="CreateTwidForm">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    
                    <div class="twid-input-container">
                        <InputTextArea @bind-Value="newTwid.Text" 
                                       placeholder="Share your thoughts..." 
                                       class="twid-textarea"/>
                        <ValidationMessage For="@(() => newTwid.Text)"/>
                    </div>
                    
                    <div class="twid-actions">
                        <span class="character-count">@(newTwid.Text?.Length ?? 0)/1024</span>
                        <button type="submit" class="twid-submit-btn" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span>Posting...</span>
                            }
                            else
                            {
                                <span>Post Twid</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>

        <div class="feed-content">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="success-message">
                    @successMessage
                </div>
            }

            <!-- Twids Feed -->
            <div class="twids-container">
                <h3>Latest Twids</h3>
                
                @if (isLoadingTwids)
                {
                    <div class="loading">Loading twids...</div>
                }
                else if (twids?.Any() == true)
                {
                    @foreach (var twid in twids.OrderByDescending(t => t.CreatedAt))
                    {
                        <div class="twid-card">
                            <div class="twid-header">
                                <span class="twid-user">User: @twid.UserId</span>
                                <span class="twid-date">@twid.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                            </div>
                            <div class="twid-content">
                                @twid.Text
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="no-twids">
                        <p>No twids found. Be the first to post something!</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .home-container {
        min-height: 100vh;
        background: #f8f9fa;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .home-header {
        background: #ffffff;
        padding: 1rem 3rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
        border-bottom: 1px solid #dee2e6;
        position: sticky;
        top: 0;
        z-index: 100;
    }

    .header-left {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .header-logo {
        height: 35px;
        width: auto;
    }

    .header-left h1 {
        color: #495057;
        margin: 0;
        font-size: 1.6rem;
        font-weight: 600;
    }

    .header-right {
        display: flex;
        gap: 0.75rem;
        align-items: center;
    }

    .profile-btn, .logout-btn {
        padding: 0.5rem 1.25rem;
        border: 1px solid;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 500;
        font-size: 0.875rem;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
    }

    .profile-btn {
        background: #007bff;
        color: white;
        border-color: #007bff;
    }

    .profile-btn:hover {
        background: #0056b3;
        border-color: #0056b3;
    }

    .logout-btn {
        background: transparent;
        color: #dc3545;
        border-color: #dc3545;
    }

    .logout-btn:hover {
        background: #dc3545;
        color: white;
    }

    .profile-icon {
        font-size: 1rem;
    }

    .main-content {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 3rem;
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 2rem;
        align-items: start;
    }

    .sidebar {
        position: sticky;
        top: 100px;
    }

    .create-twid-card {
        background: #ffffff;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        border: 1px solid #dee2e6;
        margin-bottom: 1.5rem;
    }

    .create-twid-card h3 {
        color: #495057;
        margin: 0 0 1rem 0;
        font-size: 1.2rem;
        font-weight: 600;
    }

    .twid-input-container {
        margin-bottom: 1rem;
    }

    .twid-textarea {
        width: 100%;
        min-height: 80px;
        padding: 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 0.875rem;
        font-family: inherit;
        resize: vertical;
        transition: border-color 0.15s ease;
    }

    .twid-textarea:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.15);
    }

    .twid-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .character-count {
        color: #6c757d;
        font-size: 0.8rem;
    }

    .twid-submit-btn {
        background: #007bff;
        color: white;
        border: 1px solid #007bff;
        padding: 0.5rem 1.25rem;
        border-radius: 4px;
        font-weight: 500;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.15s ease;
    }

    .twid-submit-btn:hover:not(:disabled) {
        background: #0056b3;
        border-color: #0056b3;
    }

    .twid-submit-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .feed-content {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .twids-container {
        background: #ffffff;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        border: 1px solid #dee2e6;
    }

    .twids-container h3 {
        color: #495057;
        margin: 0 0 1.5rem 0;
        font-size: 1.2rem;
        font-weight: 600;
    }

    .twid-card {
        background: #ffffff;
        border-radius: 4px;
        padding: 1rem;
        margin-bottom: 0.75rem;
        border: 1px solid #dee2e6;
        transition: border-color 0.15s ease;
    }

    .twid-card:hover {
        border-color: #adb5bd;
    }

    .twid-card:last-child {
        margin-bottom: 0;
    }

    .twid-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #e9ecef;
    }

    .twid-user {
        font-weight: 600;
        color: #495057;
        font-size: 0.875rem;
    }

    .twid-date {
        color: #6c757d;
        font-size: 0.75rem;
    }

    .twid-content {
        color: #212529;
        line-height: 1.5;
        font-size: 0.9rem;
    }

    .loading, .no-twids {
        text-align: center;
        padding: 2rem;
        color: #6c757d;
        font-style: italic;
        font-size: 0.9rem;
    }

    .error-message {
        background: #f8d7da;
        color: #721c24;
        padding: 0.75rem 1rem;
        border-radius: 4px;
        border: 1px solid #f5c6cb;
        margin-bottom: 1rem;
        font-size: 0.875rem;
    }

    .success-message {
        background: #d1edff;
        color: #0c5460;
        padding: 0.75rem 1rem;
        border-radius: 4px;
        border: 1px solid #bee5eb;
        margin-bottom: 1rem;
        font-size: 0.875rem;
    }

    @@media (max-width: 992px) {
        .main-content {
            grid-template-columns: 1fr;
            padding: 1.5rem 2rem;
        }

        .sidebar {
            position: static;
        }
    }

    @@media (max-width: 768px) {
        .home-header {
            padding: 1rem 1.5rem;
            flex-direction: column;
            gap: 1rem;
        }

        .header-left h1 {
            font-size: 1.4rem;
        }

        .main-content {
            padding: 1rem;
        }

        .create-twid-card, .twids-container {
            padding: 1rem;
        }

        .twid-actions {
            flex-direction: column;
            gap: 0.75rem;
            align-items: stretch;
        }

        .twid-submit-btn {
            width: 100%;
        }
    }
</style>

@code {
    private TwidViewModel newTwid = new();
    private List<TwidModel>? twids;
    private string? errorMessage;
    private string? successMessage;
    private bool isSubmitting;
    private bool isLoadingTwids = true;
    private string? currentUserEmail;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            currentUserEmail = await LocalStorage.GetItemAsStringAsync("userEmail");
            await LoadTwids();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load page: " + ex.Message;
        }
    }

    private async Task LoadTwids()
    {
        try
        {
            isLoadingTwids = true;
            var (success, response) = await TwidApiClient.GetAllAsync();
            
            if (success)
            {
                twids = JsonSerializer.Deserialize<List<TwidModel>>(response, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                errorMessage = "Failed to load twids: " + response;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading twids: " + ex.Message;
        }
        finally
        {
            isLoadingTwids = false;
        }
    }

    private async Task HandleCreateTwid()
    {
        try
        {
            isSubmitting = true;
            errorMessage = null;
            successMessage = null;

            // 1. Get the current user from LocalStorage
            var email = await LocalStorage.GetItemAsStringAsync("userEmail");

            if (string.IsNullOrWhiteSpace(email))
            {
                errorMessage = "Could not find user information. Please login again.";
                return;
            }

            // 2. Fetch the full UserModel from API
            var (userSuccess, userResponse) = await UserApiClient.GetUserByEmailAsync(email);

            if (!userSuccess)
            {
                errorMessage = "Failed to retrieve user: " + userResponse;
                return;
            }

            var user = System.Text.Json.JsonSerializer.Deserialize<UserModel>(
                userResponse,
                new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }
            );

            if (user == null)
            {
                errorMessage = "User not found.";
                return;
            }

            // 3. Create Twid with real UserId
            var twidModel = new TwidModel
            {
                Id = Guid.NewGuid(),
                UserId = user.Id,              // ✅ actual user ID
                Text = newTwid.Text,
                CreatedAt = DateTime.UtcNow
            };

            var (success, response) = await TwidApiClient.CreateAsync(twidModel);

            if (success)
            {
                successMessage = "Twid posted successfully!";
                newTwid = new TwidViewModel();
                await LoadTwids();

                _ = Task.Delay(3000).ContinueWith(_ =>
                {
                    successMessage = null;
                    InvokeAsync(StateHasChanged);
                });
            }
            else
            {
                errorMessage = "Failed to post twid: " + response;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error posting twid: " + ex.Message;
        }
        finally
        {
            isSubmitting = false;
        }
    }


    private void NavigateToProfile()
    {
        Navigation.NavigateTo("/profile");
    }

    private async Task HandleLogout()
    {
        try
        {
            await LocalStorage.RemoveItemAsync("authToken");
            await LocalStorage.RemoveItemAsync("userEmail");
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = "Error during logout: " + ex.Message;
        }
    }
}